name: Fetch Exchange Rates

on:
  schedule:
    # 한국 시간 기준 11시 이후부터 2분마다 실행 (한국 시간 기준)
    # UTC 시간으로는 2시부터 시작 (한국 시간 11시 = UTC 2시)
    - cron: '*/2 2-23 * * *'  # UTC 2시-23시 (한국 시간 11시-다음날 8시) 2분마다
  workflow_dispatch:  # 수동 실행 가능

jobs:
  fetch-rates:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Create data directories
      run: |
        mkdir -p data
        mkdir -p data/history
        mkdir -p data/daily
      
    - name: Fetch exchange rates
      run: |
        # 현재 요일 확인 (0=일요일, 1=월요일, ..., 6=토요일)
        DAY_OF_WEEK=$(date +%w)
        KST_HOUR=$(TZ='Asia/Seoul' date +%H)
        
        echo "현재 요일: $DAY_OF_WEEK (토요일=6, 일요일=0)"
        echo "한국 시간: $(TZ='Asia/Seoul' date)"
        echo "한국 시간대: $KST_HOUR시"
        
        # 주말에도 searchdate 파라미터로 마지막 평일 데이터 요청 가능
        # (이전에는 주말에 아예 API 호출을 하지 않았지만, 이제는 금요일 데이터를 요청)
        
        # 영업일 11시 이전인 경우 마지막 데이터 유지
        if [ $KST_HOUR -lt 11 ]; then
          echo "영업일 11시 이전입니다. 마지막 데이터를 유지합니다."
          exit 0
        fi
        
        # 평일 11시 이후인 경우 한국수출입은행 API에서 환율 데이터 가져오기
        echo "평일 11시 이후입니다. 수출입은행 API에서 최신 환율 데이터를 가져옵니다."
        
        # searchdate 파라미터 설정 (주말에는 마지막 평일 데이터 요청)
        SEARCH_DATE=$(TZ='Asia/Seoul' date '+%Y%m%d')
        
        # 주말인 경우 마지막 평일(금요일) 날짜로 설정
        if [ $DAY_OF_WEEK -eq 6 ]; then
          # 토요일인 경우 전날(금요일) 날짜
          SEARCH_DATE=$(TZ='Asia/Seoul' date -d 'yesterday' '+%Y%m%d')
          echo "토요일 감지: 금요일 데이터 요청 ($SEARCH_DATE)"
        elif [ $DAY_OF_WEEK -eq 0 ]; then
          # 일요일인 경우 이틀 전(금요일) 날짜  
          SEARCH_DATE=$(TZ='Asia/Seoul' date -d '2 days ago' '+%Y%m%d')
          echo "일요일 감지: 금요일 데이터 요청 ($SEARCH_DATE)"
        else
          echo "평일: 당일 데이터 요청 ($SEARCH_DATE)"
        fi
        
        # API 호출 (searchdate 파라미터 포함)
        echo "API 호출: searchdate=$SEARCH_DATE"
        curl -o data/exchange-rates.json "https://oapi.koreaexim.go.kr/site/program/financial/exchangeJSON?authkey=${{ secrets.KOREA_EXIM_API_KEY }}&searchdate=$SEARCH_DATE&data=AP01"
        
        # 날짜별 파일명 생성
        HISTORY_FILENAME="data/history/exchange-rates-${SEARCH_DATE}.json"
        DAILY_FILENAME="data/daily/exchange-rates-${SEARCH_DATE}.json"
        
        # API 응답 확인
        if [ ! -s data/exchange-rates.json ]; then
          echo "❌ API 응답이 비어있습니다. 마지막 데이터를 유지합니다."
          exit 0
        fi
        
        # JSON 배열이 비어있는지 확인
        if [ "$(cat data/exchange-rates.json | jq 'length')" -eq 0 ]; then
          echo "❌ API에서 빈 배열을 반환했습니다. 마지막 데이터를 유지합니다."
          exit 0
        fi
        
        # 첫 번째 항목이 null인지 확인
        FIRST_ITEM=$(cat data/exchange-rates.json | jq '.[0] // empty')
        if [ -z "$FIRST_ITEM" ] || [ "$FIRST_ITEM" = "null" ]; then
          echo "❌ API에서 null 데이터를 반환했습니다. 마지막 데이터를 유지합니다."
          exit 0
        fi
        
        echo "✅ API에서 유효한 데이터를 받았습니다."
        cat data/exchange-rates.json | jq '.[0] | {cur_nm: .cur_nm, deal_bas_r: .deal_bas_r}'
        
        # 유효한 데이터를 날짜별 파일로 저장
        echo "📁 날짜별 데이터 저장: $HISTORY_FILENAME"
        cp data/exchange-rates.json "$HISTORY_FILENAME"
        cp data/exchange-rates.json "$DAILY_FILENAME"
        
        # 메타데이터 추가 (저장 시간, API 소스 등)
        echo "📊 메타데이터 추가"
        META_DATA=$(cat << EOF
{
  "date": "$SEARCH_DATE",
  "fetch_time": "$(TZ='Asia/Seoul' date -Iseconds)",
  "api_source": "korea_exim_bank",
  "data_count": $(cat data/exchange-rates.json | jq 'length'),
  "search_date": "$SEARCH_DATE"
}
EOF
        )
        
        # 메타데이터를 별도 파일로 저장
        echo "$META_DATA" > "data/history/meta-${SEARCH_DATE}.json"
        
    - name: Commit and push
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # 한국 시간 기준으로 조건 확인
        DAY_OF_WEEK=$(date +%w)
        KST_HOUR=$(TZ='Asia/Seoul' date +%H)
        
        # 11시 이전인 경우 커밋 건너뛰기 (주말은 이제 API 호출함)
        if [ $KST_HOUR -lt 11 ]; then
          echo "영업일 11시 이전이므로 데이터 업데이트를 건너뜁니다."
          exit 0
        fi
        
        # 유효한 데이터가 있는 경우에만 커밋
        if [ -f data/exchange-rates.json ] && [ -s data/exchange-rates.json ]; then
          DATA_LENGTH=$(cat data/exchange-rates.json | jq 'length')
          if [ "$DATA_LENGTH" -gt 0 ]; then
            # 모든 데이터 파일 추가 (현재 + 누적)
            git add data/exchange-rates.json
            git add data/history/*.json 2>/dev/null || true
            git add data/daily/*.json 2>/dev/null || true
            
            if ! git diff --staged --quiet; then
              COMMIT_DATE=$(TZ='Asia/Seoul' date '+%Y-%m-%d %H:%M KST')
              SEARCH_DATE=$(TZ='Asia/Seoul' date '+%Y%m%d')
              
              git commit -m "Update exchange rates - $COMMIT_DATE

- Current data: data/exchange-rates.json
- Historical data: data/history/exchange-rates-$SEARCH_DATE.json
- Daily archive: data/daily/exchange-rates-$SEARCH_DATE.json
- Metadata: data/history/meta-$SEARCH_DATE.json
- Data count: $DATA_LENGTH currencies"
              
              git push
              echo "✅ 환율 데이터가 성공적으로 업데이트되었습니다."
              echo "📁 누적 저장: $DATA_LENGTH개 통화 데이터"
            else
              echo "📊 데이터 변경사항이 없습니다."
            fi
          else
            echo "❌ 유효한 데이터가 없어서 커밋을 건너뜁니다."
          fi
        else
          echo "❌ 데이터 파일이 없거나 비어있어서 커밋을 건너뜁니다."
        fi
