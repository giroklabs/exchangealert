name: Fetch Exchange Rates

on:
  schedule:
    # 한국 시간(KST) 기준 11시 이후부터 1분마다 실행 (최소 간격)
    # KST = UTC + 9시간
    # 한국시간 11시-23시 = UTC 2시-14시
    - cron: '* 2-14 * * *'  # UTC 2시-14시 (한국시간 11시-23시) 1분마다
    # 한국시간 새벽 0시-8시 = UTC 15시-23시 (전날)
    - cron: '* 15-23 * * *'  # UTC 15시-23시 (한국시간 0시-8시 다음날) 1분마다
  workflow_dispatch:  # 수동 실행 가능

jobs:
  fetch-rates:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Create data directories
      run: |
        mkdir -p data
        mkdir -p data/history
        mkdir -p data/daily
      
    - name: Fetch exchange rates
      run: |
        # 한국 시간(KST) 기준으로 요일 및 시간 확인
        DAY_OF_WEEK=$(TZ='Asia/Seoul' date +%w)
        KST_HOUR=$(TZ='Asia/Seoul' date +%H)
        KST_DATE=$(TZ='Asia/Seoul' date '+%Y-%m-%d %H:%M:%S KST')
        
        echo "=== 한국 시간(KST) 기준 정보 ==="
        echo "현재 한국 시간: $KST_DATE"
        echo "요일: $DAY_OF_WEEK (일요일=0, 월요일=1, ..., 토요일=6)"
        echo "한국 시간대: $KST_HOUR시"
        
        # 주말에도 searchdate 파라미터로 마지막 평일 데이터 요청 가능
        # (이전에는 주말에 아예 API 호출을 하지 않았지만, 이제는 금요일 데이터를 요청)
        
        # 영업일 11시 이전인 경우 마지막 데이터 유지
        if [ $KST_HOUR -lt 11 ]; then
          echo "영업일 11시 이전입니다. 마지막 데이터를 유지합니다."
          exit 0
        fi
        
        # 평일 11시 이후인 경우 한국수출입은행 API에서 환율 데이터 가져오기
        echo "평일 11시 이후입니다. 수출입은행 API에서 최신 환율 데이터를 가져옵니다."
        
        # searchdate 파라미터 설정 (주말에는 마지막 평일 데이터 요청)
        SEARCH_DATE=$(TZ='Asia/Seoul' date '+%Y%m%d')
        
        # 주말인 경우 마지막 평일(금요일) 날짜로 설정
        if [ $DAY_OF_WEEK -eq 6 ]; then
          # 토요일인 경우 전날(금요일) 날짜
          SEARCH_DATE=$(TZ='Asia/Seoul' date -d 'yesterday' '+%Y%m%d')
          echo "토요일 감지: 금요일 데이터 요청 ($SEARCH_DATE)"
        elif [ $DAY_OF_WEEK -eq 0 ]; then
          # 일요일인 경우 이틀 전(금요일) 날짜  
          SEARCH_DATE=$(TZ='Asia/Seoul' date -d '2 days ago' '+%Y%m%d')
          echo "일요일 감지: 금요일 데이터 요청 ($SEARCH_DATE)"
        else
          echo "평일: 당일 데이터 요청 ($SEARCH_DATE)"
        fi
        
        # API 호출 (searchdate 파라미터 포함)
        echo "API 호출: searchdate=$SEARCH_DATE"
        curl -o data/exchange-rates.json "https://oapi.koreaexim.go.kr/site/program/financial/exchangeJSON?authkey=${{ secrets.KOREA_EXIM_API_KEY }}&searchdate=$SEARCH_DATE&data=AP01"
        
        # 날짜별 파일명 생성
        HISTORY_FILENAME="data/history/exchange-rates-${SEARCH_DATE}.json"
        DAILY_FILENAME="data/daily/exchange-rates-${SEARCH_DATE}.json"
        
        # API 응답 확인
        if [ ! -s data/exchange-rates.json ]; then
          echo "❌ API 응답이 비어있습니다. 마지막 데이터를 유지합니다."
          exit 0
        fi
        
        # JSON 배열이 비어있는지 확인
        if [ "$(cat data/exchange-rates.json | jq 'length')" -eq 0 ]; then
          echo "❌ API에서 빈 배열을 반환했습니다. 마지막 데이터를 유지합니다."
          exit 0
        fi
        
        # 첫 번째 항목이 null인지 확인
        FIRST_ITEM=$(cat data/exchange-rates.json | jq '.[0] // empty')
        if [ -z "$FIRST_ITEM" ] || [ "$FIRST_ITEM" = "null" ]; then
          echo "❌ API에서 null 데이터를 반환했습니다. 마지막 데이터를 유지합니다."
          exit 0
        fi
        
        echo "✅ API에서 유효한 데이터를 받았습니다."
        cat data/exchange-rates.json | jq '.[0] | {cur_nm: .cur_nm, deal_bas_r: .deal_bas_r}'
        
        # 유효한 데이터를 날짜별 파일로 저장
        echo "📁 날짜별 데이터 저장: $HISTORY_FILENAME"
        cp data/exchange-rates.json "$HISTORY_FILENAME"
        cp data/exchange-rates.json "$DAILY_FILENAME"
        
        # 메타데이터 추가 (저장 시간, API 소스 등)
        echo "📊 메타데이터 추가"
        echo "{\"date\":\"$SEARCH_DATE\",\"fetch_time\":\"$(TZ='Asia/Seoul' date -Iseconds)\",\"api_source\":\"korea_exim_bank\",\"data_count\":$(cat data/exchange-rates.json | jq 'length'),\"search_date\":\"$SEARCH_DATE\"}" > "data/history/meta-${SEARCH_DATE}.json"
        
    - name: Commit and push
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # 한국 시간(KST) 기준으로 조건 확인
        DAY_OF_WEEK=$(TZ='Asia/Seoul' date +%w)
        KST_HOUR=$(TZ='Asia/Seoul' date +%H)
        KST_DATE=$(TZ='Asia/Seoul' date '+%Y-%m-%d %H:%M:%S KST')
        
        echo "=== 커밋 단계 - 한국 시간 기준 ==="
        echo "현재 한국 시간: $KST_DATE"
        echo "요일: $DAY_OF_WEEK, 시간: $KST_HOUR시"
        
        # 11시 이전인 경우 커밋 건너뛰기 (주말은 이제 API 호출함)
        if [ $KST_HOUR -lt 11 ]; then
          echo "한국시간 11시 이전이므로 데이터 업데이트를 건너뜁니다."
          exit 0
        fi
        
        # 유효한 데이터가 있는 경우에만 커밋
        if [ -f data/exchange-rates.json ] && [ -s data/exchange-rates.json ]; then
          DATA_LENGTH=$(cat data/exchange-rates.json | jq 'length')
          if [ "$DATA_LENGTH" -gt 0 ]; then
            # 모든 데이터 파일 추가 (현재 + 누적)
            git add data/exchange-rates.json
            git add data/history/*.json 2>/dev/null || true
            git add data/daily/*.json 2>/dev/null || true
            
            if ! git diff --staged --quiet; then
              COMMIT_DATE=$(TZ='Asia/Seoul' date '+%Y-%m-%d %H:%M KST')
              # SEARCH_DATE 재계산 (워크플로우 첫 번째 단계와 동일한 로직)
              SEARCH_DATE=$(TZ='Asia/Seoul' date '+%Y%m%d')
              
              # 주말인 경우 마지막 평일 날짜로 설정
              if [ $DAY_OF_WEEK -eq 6 ]; then
                SEARCH_DATE=$(TZ='Asia/Seoul' date -d 'yesterday' '+%Y%m%d')
              elif [ $DAY_OF_WEEK -eq 0 ]; then
                SEARCH_DATE=$(TZ='Asia/Seoul' date -d '2 days ago' '+%Y%m%d')
              fi
              
              git commit -m "Update exchange rates - $COMMIT_DATE - Current: data/exchange-rates.json - Historical: data/history/exchange-rates-$SEARCH_DATE.json - Daily: data/daily/exchange-rates-$SEARCH_DATE.json - Metadata: data/history/meta-$SEARCH_DATE.json - Count: $DATA_LENGTH currencies"
              
              git push
              echo "Exchange rate data updated successfully."
              echo "Stored $DATA_LENGTH currencies"
            else
              echo "No data changes."
            fi
          else
            echo "No valid data to commit."
          fi
        else
          echo "No data file or empty file."
        fi